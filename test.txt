classdef config < handle 
    properties
        SOC0
        C0 
        SOC_Window_Granularity
        openLog
        Moving_SOC_Window_Width = 10; 
        Moving_SOC_Window_Step = 5;   
        R0_Threshold = 0.5;        
        R0_AvgPoints = 3;       
    end
    
    properties (Access = private)
        Instance = []
    end
    
    methods (Access = private)
        function obj = config(SOC0, C0, SOC_Window_Granularity)
            if nargin > 0
                obj.SOC0 = SOC0;
                obj.C0 = C0;
                obj.SOC_Window_Granularity = SOC_Window_Granularity;
                obj.openLog = false;
            end
        end
    end

    methods
        function set.SOC0(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>=', 0, '<=', 100});
            obj.SOC0 = value;
        end
        
        function set.C0(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>', 0});
            obj.C0 = value;
        end
        
        function set.SOC_Window_Granularity(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>', 0});
            obj.SOC_Window_Granularity = value;
        end
        
        function set.openLog(obj, value)
            validateattributes(value, {'logical'}, {'scalar'});
            obj.openLog = value;
        end

        function set.Moving_SOC_Window_Width(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>', 0});
            obj.Moving_SOC_Window_Width = value;
        end

        function set.Moving_SOC_Window_Step(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>', 0});
            obj.Moving_SOC_Window_Step = value;
        end

        function set.R0_Threshold(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>=', 0});
            obj.R0_Threshold = value;
        end

        function set.R0_AvgPoints(obj, value)
            validateattributes(value, {'numeric'}, {'scalar', '>', 0});
            obj.R0_AvgPoints = value;
        end

        

        
    end
    
    methods (Static)
        function singleObj = getInstance()
            persistent localObj
            if isempty(localObj) || ~isvalid(localObj)
                localObj = config(100,  4.3635, 5);
            end
            singleObj = localObj;
        end

        
    end
end

classdef LoadData
    properties (SetAccess = private)
        DataTable      % 存储完整数据表格
        FilePath       % 文件路径
    end
    
    properties (Dependent)
        Rec            % 记录号
        Cyc            % 循环次数
        Step           % 步骤编号
        TestTime       % 测试时间戳（秒）
        StepTime       % 步骤内时间戳（秒）
        Amp_hr         % 安时容量
        Watt_hr        % 瓦时容量
        Amps           % 电流（正充电，负放电）
        Volts          % 电压
    end
    
    methods
        function obj = LoadData(filePath)
            if nargin < 1
                fileList = dir('*.csv');
                if isempty(fileList)
                    error('LoadData:FileNotFound', '未找到 CSV 文件');
                end
                obj.FilePath = fullfile(pwd, fileList(1).name);
            else
                if ~exist(filePath, 'file')
                    error('LoadData:FileNotFound', '文件不存在: %s', filePath);
                end
                obj.FilePath = filePath;
            end
            obj = obj.readData();  
        end
        
        function obj = readData(obj)
            try
                tbl = readtable(obj.FilePath, ...
                    'Delimiter', ',', ...          
                    'VariableNamingRule', 'preserve'); 
            catch ME
                error('LoadData:ReadError', 'CSV 文件读取失败: %s', ME.message);
            end
            
            requiredCols = {'Rec', 'Cyc', 'Step', 'TestTime', 'StepTime', ...
                            'Amp_hr', 'Watt_hr', 'Amps', 'Volts'};
            missingCols = setdiff(requiredCols, tbl.Properties.VariableNames);
            if ~isempty(missingCols)
                error('LoadData:MissingColumns', 'CSV 文件中缺失必要列: %s', strjoin(missingCols, ', '));
            end
            
            obj.DataTable = tbl(:, requiredCols);
        end
        function rowData = getRow(obj, idx)
            validateattributes(idx, {'numeric'}, ...
                {'scalar', 'positive', 'integer', '<=', height(obj.DataTable)});
    
            rowData = table2struct(obj.DataTable(idx, :));
        end
    end
    
    methods
        function value = get.Rec(obj),       value = obj.DataTable.Rec;       end
        function value = get.Cyc(obj),       value = obj.DataTable.Cyc;       end
        function value = get.Step(obj),      value = obj.DataTable.Step;      end
        function value = get.TestTime(obj),  value = obj.DataTable.TestTime;  end
        function value = get.StepTime(obj),  value = obj.DataTable.StepTime;  end
        function value = get.Amp_hr(obj),    value = obj.DataTable.Amp_hr;    end
        function value = get.Watt_hr(obj),   value = obj.DataTable.Watt_hr;   end
        function value = get.Amps(obj),      value = -obj.DataTable.Amps;      end
        function value = get.Volts(obj),     value = obj.DataTable.Volts;     end
    end
end

data=LoadData;
prec = preconditioningData;
prec = prec.init(data);
prev_Vmean = Inf; 
for k = length(prec.SOC_Windows):-1:1
    prec.SOC_Windows(k) = prec.SOC_Windows(k).getAllRow(data);
    prec.SOC_Windows(k) = prec.SOC_Windows(k).fminconTest(prev_Vmean);
    volt_temp=prec.SOC_Windows(k).rowInfo.Volts;
    prev_Vmean = min(volt_temp);
end

    verifyModel(prec, data);


% 或者如果 R0_lookup_function 是一个独立变量:
% verifyModel(prec, data, R0_lookup_function);

function rmse = verifyModel(prec, data)
    t = data.TestTime;    % 时间序列
    I = data.Amps;        % 电流
    V_actual = data.Volts; % 实际电压
    S = prec.SOC_Status;   % SOC

    if length(S) ~= length(t)
        error('SOC_Status长度 (%d) 与数据行数 (%d) 不匹配', length(S), length(t));
    end

    V_predicted = zeros(size(V_actual));
    V_RC = 0; 
    for k = 1:length(t)
        soc = S(k);
        window_idx = find([prec.SOC_Windows.range_lower] <= soc & ...
                          [prec.SOC_Windows.range_upper] >= soc, 1);
        if isempty(window_idx)
            error('SOC %.2f%% 超出窗口范围', soc);
        end
        window = prec.SOC_Windows(window_idx);

        if isempty(window.oth)
            error('SOC %.2f%% 没有对应的参数', soc);
        end
        OCV1 = window.oth(1);
        OCV2 = window.oth(2);
        R0 = window.oth(3);
        R1 = window.oth(4);
        tau1 = window.oth(5);

        OCV = OCV1 * soc + OCV2;

        if k > 1
            dt = t(k) - t(k-1);
            if dt <= 0
                warning('时间步长非正: dt = %.2f s at k = %d', dt, k);
                V_predicted(k) = V_predicted(k-1); 
                continue;
            end
            dV_RC = (I(k-1) * R1 - V_RC) / tau1;
            V_RC = V_RC + dt * dV_RC;
        end

        V_predicted(k) = OCV - I(k) * R0 - V_RC;
    end

    rmse = sqrt(mean((V_actual - V_predicted).^2));
    fprintf('全局电压预测 RMSE: %.4f V\n', rmse);

figure;
    plot(t, V_actual, 'b', 'DisplayName', '实际电压');
    hold on;
    plot(t, V_predicted, 'r--', 'DisplayName', '预测电压');
    xlabel('时间 (s)');
    ylabel('电压 (V)');
    legend;
    title('实际电压 vs 预测电压');
end

%预处理实验数据，获取必要的数据
%划分SOC窗口，并且根据窗口分别计算数据
%需要计算SOC，用安时积分
classdef preconditioningData
properties
    SOC_Status
    SOC_Windows

    MovingWindowSOC % 新增：存储滑动窗口中心SOC
    MovingWindowR0  % 新增：存储滑动窗口计算的R0
    RawData         % 新增：存储原始数据引用，方便访问
    R0Lookup
end
methods

    function obj = init(obj, data)
        obj.RawData = data; % 存储原始数据引用
        obj = obj.calculateSoc(data);

       
        obj = obj.getSOCWindows(data); % 保留用于其他参数识别

        window_width = config.getInstance().Moving_SOC_Window_Width;
        step_size = config.getInstance().Moving_SOC_Window_Step;   
        r0_threshold = config.getInstance().R0_Threshold; % 获取R0计算参数
        r0_avg_points = config.getInstance().R0_AvgPoints; % 获取R0计算参数

        obj = obj.calculateMovingWindowR0(window_width, step_size, r0_threshold, r0_avg_points);

        valid_indices = ~isnan(obj.MovingWindowR0) & ~isnan(obj.MovingWindowSOC);
        soc_pts = obj.MovingWindowSOC(valid_indices);
        r0_pts = obj.MovingWindowR0(valid_indices);

        [unique_soc_pts, ia, ic] = unique(soc_pts);
        unique_r0_pts = accumarray(ic, r0_pts, [], @mean); % Average R0 for duplicate SOCs

        if length(unique_soc_pts) < 2
            error('Need at least two valid, unique R0 points to create an interpolator.');
        end

        R0_lookup_function = @(soc_query) interp1(unique_soc_pts, unique_r0_pts, ...
            max(min(soc_query, max(unique_soc_pts)), min(unique_soc_pts)), 'linear', 'extrap');
            

        % --- You now have 'R0_lookup_function' ready to be used ---
        % You might store it in the preconditioningData object:
         obj.R0Lookup = R0_lookup_function;
         for i = 1:length(obj.SOC_Windows)
            block = obj.SOC_Windows(i);
            center_soc = (block.range_lower + block.range_upper) / 2; 
            block.R0 = obj.R0Lookup(center_soc); 
            obj.SOC_Windows(i) = block; 
        end
    end
    function obj = calculateSoc(obj,data) 
        SOC0 = config.getInstance().SOC0; 
        capacity = config.getInstance().C0; 
    
        time = data.TestTime;
        current = data.Amps; 
    
        dt = diff(time)/3600; 
        SOC = SOC0; 
        SOC_List = zeros(size(time));
        SOC_List(1) = SOC;
    
        for k = 2:length(time)
            delta_Q = current(k-1) * dt(k-1); 
            
            SOC = SOC - (delta_Q / capacity) * 100; 
            %SOC = max(0, min(SOC, 100));
            SOC_List(k) = SOC;
        end

        max_value=max(SOC_List);
        temp_value=max_value-100;
        for k = 1:length(SOC_List)
            SOC_List(k)=max(0,SOC_List(k)-temp_value);
        end
        obj.SOC_Status = SOC_List();
    end


    function obj = getSOCWindows(obj, data)
        window_size = config.getInstance().SOC_Window_Granularity;
        soc_edges = 0:window_size:100;
        
        num_windows = length(soc_edges) - 1;
        obj.SOC_Windows = repmat(soc_block(), 1, num_windows);
        for i = 1:num_windows
            lower = soc_edges(i);
            upper = soc_edges(i+1);
            
            current_window = soc_block(lower, upper);
            
            if i == num_windows
                mask = (obj.SOC_Status >= lower) & (obj.SOC_Status <= upper);
            else
                mask = (obj.SOC_Status >= lower) & (obj.SOC_Status < upper);
            end
            current_window.indices = find(mask);            
            current_window.SOC = obj.SOC_Status(current_window.indices); 
            obj.SOC_Windows(i) = current_window;
        end
    end

    function obj = calculateMovingWindowR0(obj, window_width, step_size, threshold, avg_points)
        if isempty(obj.SOC_Status) || isempty(obj.RawData)
            error('SOC_Status or RawData is empty. Run calculateSoc first and ensure RawData is stored.');
        end
        if window_width <= 0 || step_size <= 0
            error('Window width and step size must be positive.');
        end

        soc_centers = [];
        r0_values = [];

        min_soc = window_width / 2;
        max_soc = 100 - window_width / 2;

        if min_soc > max_soc % 处理窗口过大的情况
           warning('Window width is too large for the SOC range.');
           obj.MovingWindowSOC = [];
           obj.MovingWindowR0 = [];
           return;
        end

        current_center_soc = min_soc;

        all_currents = obj.RawData.Amps; 
        all_voltages = obj.RawData.Volts; 

        while current_center_soc <= max_soc
            lower_soc = max(0, current_center_soc - window_width / 2);
            upper_soc = min(100, current_center_soc + window_width / 2);

            % 找到当前窗口内的索引
            mask = (obj.SOC_Status >= lower_soc) & (obj.SOC_Status < upper_soc);
            % 对最后一个可能的中心点，包含上限
            if abs(current_center_soc - max_soc) < step_size / 2
                mask = (obj.SOC_Status >= lower_soc) & (obj.SOC_Status <= upper_soc);
            end
            indices = find(mask);

            if length(indices) >= 2 * avg_points + 1 % 确保有足够数据点计算R0
                % 提取当前窗口的电压和电流
                window_currents = all_currents(indices);
                window_voltages = all_voltages(indices);

                % 调用静态R0计算函数
                current_r0 = preconditioningData.staticCalculateR0(window_currents, window_voltages, threshold, avg_points);

                if ~isnan(current_r0)
                    soc_centers = [soc_centers; current_center_soc];
                    r0_values = [r0_values; current_r0];
                else
                     fprintf('Warning: R0 calculation failed for SOC center %.2f%% (Window [%.2f%%, %.2f%%])\n', ...
                             current_center_soc, lower_soc, upper_soc);
                end
            else
                fprintf('Warning: Not enough data points (%d) for SOC center %.2f%% (Window [%.2f%%, %.2f%%])\n', ...
                        length(indices), current_center_soc, lower_soc, upper_soc);
            end

            % 移动到下一个窗口中心
            current_center_soc = current_center_soc + step_size;

            % 确保最后一个点被计算（如果步长不能整除）
             if current_center_soc > max_soc && abs(current_center_soc - step_size - max_soc) > 1e-6 % 检查是否刚超过但之前没算到max_soc
                current_center_soc = max_soc; % 强制计算最后一个中心点
                 % 重复上面的查找和计算逻辑... (可以封装成一个内部函数避免重复)
                 lower_soc = max(0, current_center_soc - window_width / 2);
                 upper_soc = min(100, current_center_soc + window_width / 2);
                 mask = (obj.SOC_Status >= lower_soc) & (obj.SOC_Status <= upper_soc); % 包含上限
                 indices = find(mask);
                 if length(indices) >= 2 * avg_points + 1
                     window_currents = all_currents(indices);
                     window_voltages = all_voltages(indices);
                     current_r0 = preconditioningData.staticCalculateR0(window_currents, window_voltages, threshold, avg_points);
                     if ~isnan(current_r0)
                         % 检查是否已经添加过这个中心点 (避免因浮点数误差重复添加)
                         if isempty(soc_centers) || abs(soc_centers(end) - current_center_soc) > 1e-6
                             soc_centers = [soc_centers; current_center_soc];
                             r0_values = [r0_values; current_r0];
                         end
                     else
                          fprintf('Warning: R0 calculation failed for SOC center %.2f%% (Window [%.2f%%, %.2f%%])\n', ...
                                  current_center_soc, lower_soc, upper_soc);
                     end
                 else
                      fprintf('Warning: Not enough data points (%d) for SOC center %.2f%% (Window [%.2f%%, %.2f%%])\n', ...
                              length(indices), current_center_soc, lower_soc, upper_soc);
                 end
                 break; % 计算完最后一个点后退出循环
             end
        end

        obj.MovingWindowSOC = soc_centers;
        obj.MovingWindowR0 = r0_values;
        fprintf('Calculated R0 for %d moving windows.\n', length(soc_centers));
    end

    function plotSmoothedR0(obj, method)
        if nargin < 2
            method = 'spline'; % 默认使用样条插值
        end
    
        if isempty(obj.MovingWindowSOC) || isempty(obj.MovingWindowR0)
            disp('No moving window R0 data to plot.');
            return;
        end
    
        valid_indices = ~isnan(obj.MovingWindowR0);
        soc_points = obj.MovingWindowSOC(valid_indices);
        r0_points = obj.MovingWindowR0(valid_indices);
    
        if length(soc_points) < 2 
            disp('Not enough valid R0 points for interpolation.');
            figure;
            scatter(soc_points, r0_points, 'filled');
            xlabel('SOC (%)');
            ylabel('R0 (Ohm)');
            title('Calculated R0 Points (Moving Window)');
            grid on;
            return;
        end
    
       
        soc_fine = linspace(min(soc_points), max(soc_points), 200);
    
 
        r0_smooth = interp1(soc_points, r0_points, soc_fine, method);
    
        % 绘图
        figure;
        scatter(soc_points, r0_points, 'b', 'filled', 'DisplayName', 'Calculated R0 Points');
        hold on;
        plot(soc_fine, r0_smooth, 'r-', 'LineWidth', 1.5, 'DisplayName', ['Smoothed R0 (', method, ')']);
        hold off;
        xlabel('SOC (%)');
        ylabel('R0 (Ohm)');
        title('R0 vs SOC ');
        legend show;
        grid on;
    end
end

methods (Static)
    function R0 = staticCalculateR0(currents, voltages, threshold, avg_points)
        if nargin < 3 || isempty(threshold)
            threshold = 0.5;
        end
        if nargin < 4 || isempty(avg_points)
            avg_points = 3;
        end

        currents = currents(:)'; 
        voltages = voltages(:)'; 
        N = length(currents);

        if N < 2 * avg_points + 1
            R0 = NaN;
             disp("错误：该窗口数据点不足，无法计算 R0"); 
            return;
        end

        R0_values = [];
        for i = avg_points + 1 : N - avg_points
            delta_I_step = currents(i) - currents(i - 1); % 检测跳变点

            if abs(delta_I_step) > threshold
                % 取跳变前后 avg_points 个点的平均值
                I_before = mean(currents(i - avg_points : i - 1));
                V_before = mean(voltages(i - avg_points : i - 1));
                I_after = mean(currents(i : i + avg_points - 1)); 
                V_after = mean(voltages(i : i + avg_points - 1));

                delta_I = I_after - I_before;
                delta_V = V_after - V_before;

                if delta_I ~= 0
                    r_val = abs(delta_V / delta_I);
                    if r_val > 0 && r_val < 1 
                       R0_values = [R0_values; r_val];
                    end
                end
            end
        end

        if ~isempty(R0_values)
            %R0_values = rmoutliers(R0_values, 'percentiles', [10 90]); 
            if ~isempty(R0_values)
               R0 = mean(R0_values);
            else
               R0 = NaN; % 移除异常值后可能为空
            end
        else
            R0 = NaN;
            % disp("未检测到有效跳变点或计算出的R0值无效");
        end
    end
end
end

classdef soc_block
    properties
        SOC
        range_lower      
        range_upper     
        indices         % 属于该窗口的原始数据索引
        R0              
        oth
        rowInfo
        skip = 0            
    end
    
    methods
        function obj = soc_block(lower, upper)
            if nargin == 0
                obj.range_lower = 0;
                obj.range_upper = 0;
            else
                obj.range_lower = lower;
                obj.range_upper = upper;
            end
            obj.indices = [];
            obj.R0 = NaN;
        end
        
      
        function obj = getAllRow(obj, data)
            totalRows = numel(obj.indices);
            disp(totalRows);
            obj.rowInfo = struct('Rec', {}, 'Cyc', {}, 'Step', {}, ...
                                'TestTime', {}, 'StepTime', {}, ...
                                'Amp_hr', {}, 'Watt_hr', {}, ...
                                'Amps', {}, 'Volts', {});
            for i = 1:totalRows
                tempStruct = data.getRow(obj.indices(i));
                obj.rowInfo(i) = tempStruct;
            end
            obj.SOC = obj.SOC(:); 

        end

        function obj = fminconTest(obj, prev_Vmean)
            data = obj.rowInfo;
            t = [data.TestTime]';
            I = [data.Amps]';
            V_meas = [data.Volts]';
            S = obj.SOC;
            
            t = t(:);
            I = I(:);
            V_meas = V_meas(:);
            S = obj.SOC(:);   
           
            if ~isequal(length(t), length(I), length(V_meas), length(S))
                error('输入数据长度不一致: t=%d, I=%d, V_meas=%d, S=%d',...
                    length(t), length(I), length(V_meas), length(S));
            end
            
            % 初始化参数和约束
            if isnan(obj.R0)
                param0 = [0.001, 3.5, 0.01, 1, 10, 0]; 
                lb = [0,0, 0, 0.01, 0,   -4.2]; 
                ub = [Inf,Inf,1,1,   100, 4.2]; 
            else
                param0 = [0.001, mean(V_meas), obj.R0, 0.01, 10, 0];
                lb = [0, 0, obj.R0, 0.01,     0,   -4.2]; 
                ub = [Inf,  Inf, obj.R0, 1, 100, 4.2]; 
            end
            
            for i = 1:length(lb)
                if lb(i) > ub(i)
                    ub(i) = lb(i) + 1e-6; % 微小偏移避免数值问题
                    warning('调整窗口 [%.1f%%-%.1f%%] 参数 %d 的边界: lb=%.3f, ub=%.3f', ...
                        obj.range_lower, obj.range_upper, i, lb(i), ub(i));
                end
            end
            if(obj.range_upper<100)
            % 线性约束：OCV(SOC=0) >=2.7 且 OCV(SOC=100) <=4.2
                A = [-(obj.range_lower+obj.range_upper)/2, -1, 0, 0, 0, 0;       % OCV2 >=2.7
                (obj.range_lower+obj.range_upper)/2, 1, 0, 0, 0, 0;  % 100*OCV1 + OCV2 <=4.2
                (obj.range_lower+obj.range_upper)/2, 1, 0, 0, 0, 0];   % -OCV1*S_j - OCV2 <= - max V(S_j(ii-1))     OCV(i)>OCV(ii-1)>V(ii-1) . (保证单调性)
                b = [-2.7; 4.2;prev_Vmean];
            else
                A = [-(obj.range_lower+obj.range_upper)/2, -1, 0, 0, 0, 0;       % OCV2 >=2.7
                (obj.range_lower+obj.range_upper)/2, 1, 0, 0, 0, 0];  % 100*OCV1 + OCV2 <=4.2
                b = [-2.7; 4.2];
            end
            % 初始条件约束
            Aeq = [S(1), 1, -I(1), 0, 0, -1];
            beq = V_meas(1);
            
            options = optimoptions('fmincon', 'display', 'iter', 'MaxIterations', 500);
            try
                [param_opt, ~, exitflag] = fmincon(@(x) obj.compute_RMSE(x, t, I, V_meas, S), ...
                    param0, A, b, Aeq, beq, lb, ub, [], options);
                
                if exitflag <= 0
                    warning('窗口 [%.1f%%-%.1f%%] 优化失败，退出标志: %d', ...
                        obj.range_lower, obj.range_upper, exitflag);
                    obj.skip = 1;
                    return;
                end
            catch ME
                warning('窗口 [%.1f%%-%.1f%%] 优化异常: %s', ...
                    obj.range_lower, obj.range_upper, ME.message);
                obj.skip = 1;
                return;
            end
            
            obj.oth = param_opt;
            obj.R0 = param_opt(3); % 更新R0
        end

        function V_model = predict(obj, params, t, I, S)
            t = t(:);
            I = I(:);
            S = S(:); 
            
            OCV1 = params(1);
            OCV2 = params(2);
            R0 = params(3);
            R1 = params(4);
            tau1 = params(5);
            V_RC_init = params(6);
            
            N = length(t);
            V_RC = zeros(N, 1);
            V_RC(1) = V_RC_init;
            
            for k = 2:N
                dt = t(k) - t(k-1);
                dV_RC = (I(k-1)*R1 - V_RC(k-1)) / tau1;
                V_RC(k) = V_RC(k-1) + dt * dV_RC;
            end
            
            OCV = OCV1 * S + OCV2;  
            V_model = OCV - I .* R0 - V_RC; 
            
        end
        
        function error = compute_RMSE(obj, x, t, I, V_meas, S)
            OCV1 = x(1);
            OCV2 = x(2);
            R0 = x(3);
            R1 = x(4);
            tau1 = x(5);
            V_RC_init = x(6);
            
            N = length(t);
            V_RC = zeros(N,1);
            V_RC(1) = V_RC_init;
            
            for k = 2:N
                dt = t(k) - t(k-1);
                V_RC(k) = V_RC(k-1) + dt * ((I(k-1)*R1 - V_RC(k-1)) / tau1);
            end
            
            OCV = OCV1 * S + OCV2;
            V_model = OCV - I.*R0 - V_RC;
            
            error = sqrt(mean((V_meas - V_model).^2));
        end
    end
end